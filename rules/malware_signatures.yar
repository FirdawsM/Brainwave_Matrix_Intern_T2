import "pe"
import "hash"
import "math"

/* ================ GENERIC NON-PE MALWARE RULES ================ */

rule EICAR_Test_File {
    meta:
        description = "Detects the EICAR antivirus test file (universal test string)"
        author = "Firdaws Alnuur (Non-PE)"
        date = "2024-06-27"
        severity = "info"
        reference = "https://www.eicar.org/download-anti-malware-testfile/"
    strings:
        $eicar_ascii = "X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*"
        $eicar_utf16 = "X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*" wide
    condition:
        $eicar_ascii or $eicar_utf16
}

rule Suspicious_Script_Keywords {
    meta:
        description = "Detects suspicious keywords in scripts (PowerShell, Python, Batch, etc.)"
        author = "Firdaws Alnuur (Non-PE)"
        date = "2024-06-27"
        severity = "medium"
    strings:
        $powershell = "powershell" nocase
        $base64 = "base64" nocase
        $eval = "eval(" nocase
        $exec = "exec(" nocase
        $importos = "import os" nocase
        $importsubprocess = "import subprocess" nocase
        $cmd = "cmd.exe" nocase
        $wget = "wget" nocase
        $curl = "curl" nocase
        $vbshell = "CreateObject(\"WScript.Shell\")"
    condition:
        2 of ($*)
}

rule Suspicious_Document_Macros {
    meta:
        description = "Detects suspicious macro keywords in Office documents"
        author = "Firdaws Alnuur (Non-PE)"
        date = "2024-06-27"
        severity = "high"
    strings:
        $autoopen = "AutoOpen" nocase
        $document_open = "Document_Open" nocase
        $shell = "Shell" nocase
        $wscript = "WScript" nocase
        $vbscript = "VBScript" nocase
        $powershell = "powershell" nocase
        $base64 = "base64" nocase
    condition:
        2 of ($*)
}

rule Generic_Suspicious_Encoded_Data {
    meta:
        description = "Detects long suspicious base64 or hex-encoded strings in any file"
        author = "Firdaws Alnuur (Non-PE)"
        date = "2024-06-27"
        severity = "medium"
    strings:
        $base64 = /[A-Za-z0-9+\/]{40,}={0,2}/
        $hex = /[A-Fa-f0-9]{32,}/
    condition:
        any of them
}

/* ================ IMPROVED PE VALIDATION RULES ================ */

rule Valid_PE_File {
    meta:
        description = "Validates basic PE file structure with enhanced checks"
        author = "Firdaws Alnuur (Enhanced)"
        date = "2024-06-27"
        severity = "low"
        reference = "PE format specification"
    
    condition:
        // Check for MZ header and valid PE signature with bounds checking
        filesize >= 0x40 and
        uint16(0) == 0x5A4D and  // "MZ" magic
        uint32(0x3C) < filesize - 4 and  // PE header pointer within bounds
        uint32(uint32(0x3C)) == 0x00004550  // PE signature
}

/* ================ ENHANCED PACKER DETECTION ================ */

rule Packed_Executable {
    meta:
        description = "Detects common executable packers with additional signatures"
        author = "Firdaws Alnuur (Enhanced)"
        date = "2024-06-27"
        severity = "high"
        reference = "https://www.hexacorn.com/blog/2016/12/15/pe-section-names-re-visited/"
    
    strings:
        $upx = "UPX" nocase
        $aspack = "ASPack" nocase
        $fsg = "FSG!" nocase
        $pecompact = "PEC2" nocase
        $themida = "Themida" nocase
        $vmprotect = "VMProtect" nocase
        $mpress = "MPRESS" nocase
        $petite = "Petite" nocase
        $armadillo = "Armadillo" nocase
        $enigma = "Enigma" nocase
        $obsidium = "Obsidium" nocase
        $kkrunchy = "kkrunchy" nocase
    
    condition:
        Valid_PE_File and any of them
}

rule Entropy_Based_Packer_Detection {
    meta:
        description = "Detects packed executables using entropy analysis"
        author = "Firdaws Alnuur (Enhanced)"
        date = "2024-06-27"
        severity = "medium"
    
    condition:
        Valid_PE_File and (
            // High entropy in sections (common in packed code)
            for any section in pe.sections : (
                math.entropy(section.raw_data_offset, section.raw_data_size) > 7.0
            ) or
            
            // Section with both high entropy and executable flag
            for any section in pe.sections : (
                math.entropy(section.raw_data_offset, section.raw_data_size) > 6.5 and
                section.characteristics & pe.SECTION_MEM_EXECUTE
            )
        )
}

/* ================ IMPROVED SUSPICIOUS CHARACTERISTICS ================ */

rule Suspicious_Sections {
    meta:
        description = "Enhanced detection of suspicious PE section characteristics"
        author = "Firdaws Alnuur (Enhanced)"
        date = "2024-06-27"
        severity = "medium"
    
    condition:
        Valid_PE_File and (
            // Writable and executable sections
            for any section in pe.sections : (
                section.characteristics & pe.SECTION_MEM_EXECUTE and
                section.characteristics & pe.SECTION_MEM_WRITE
            ) or
            
            // Known suspicious section names (expanded list)
            for any section in pe.sections : (
                section.name matches /\.(crypt|pack|taz|upx|themida|enigma|armadillo|mew|kkrunchy|vmp|winlicen)/ or
                section.name == ""  // Empty section name
            ) or
            
            // Abnormal section characteristics
            for any section in pe.sections : (
                section.raw_data_size == 0 and section.virtual_size > 0 or  // Hollow section
                section.raw_data_size > 0 and section.raw_data_offset == 0  // Invalid raw offset
            ) or
            
            // Abnormal number of sections
            pe.number_of_sections > 10 or
            pe.number_of_sections < 3
        )
}

rule Suspicious_DLL {
    meta:
        description = "Enhanced detection of suspicious DLL characteristics"
        author = "Firdaws Alnuur (Enhanced)"
        date = "2024-06-27"
        severity = "medium"
    
    condition:
        Valid_PE_File and
        pe.characteristics & pe.DLL and (
            // Suspicious entry point
            pe.entry_point == 0 or
            pe.entry_point < pe.sections[0].virtual_address or
            pe.entry_point > pe.sections[pe.number_of_sections-1].virtual_address +
                             pe.sections[pe.number_of_sections-1].virtual_size or
            
            // Few exports (common in malicious DLLs)
            (defined pe.number_of_exports and pe.number_of_exports > 0 and pe.number_of_exports < 3) or
            
            // Suspicious section flags
            for any section in pe.sections : (
                section.characteristics & pe.SECTION_MEM_EXECUTE and
                section.characteristics & pe.SECTION_MEM_WRITE
            ) or
            
            // Missing exports
            not defined pe.number_of_exports
        )
}

/* ================ ENHANCED MALICIOUS INDICATORS ================ */

rule Potentially_Malicious {
    meta:
        description = "Enhanced detection of multiple malicious indicators"
        author = "Firdaws Alnuur (Enhanced)"
        date = "2024-06-27"
        severity = "high"
    
    condition:
        Valid_PE_File and (
            ((pe.characteristics & pe.DLL) and (pe.characteristics & pe.EXECUTABLE_IMAGE)) or
            (pe.timestamp < 631152000) or  // Before 1990
            (pe.timestamp > 2524608000) or // After 2050
            (pe.timestamp == 0) or         // Zero timestamp
            (pe.entry_point == 0) or
            for any section in pe.sections : (
                section.characteristics & pe.SECTION_MEM_EXECUTE and
                section.characteristics & pe.SECTION_MEM_WRITE
            ) or
            // Replaced invalid for loop over pe.imports with explicit pe.imports() checks
            (
                pe.imports("ws2_32.dll", "InternetOpen") or
                pe.imports("ws2_32.dll", "InternetConnect") or
                pe.imports("ws2_32.dll", "HttpOpenRequest") or
                pe.imports("ws2_32.dll", "HttpSendRequest") or
                pe.imports("ws2_32.dll", "URLDownloadToFile") or
                pe.imports("wininet.dll", "InternetOpen") or
                pe.imports("wininet.dll", "InternetConnect") or
                pe.imports("wininet.dll", "HttpOpenRequest") or
                pe.imports("wininet.dll", "HttpSendRequest") or
                pe.imports("wininet.dll", "URLDownloadToFile") or
                pe.imports("urlmon.dll", "URLDownloadToFile") or
                pe.imports("advapi32.dll", "RegOpenKey") or
                pe.imports("advapi32.dll", "RegSetValue") or
                pe.imports("advapi32.dll", "RegCreateKey") or
                pe.imports("kernel32.dll", "CreateProcess") or
                pe.imports("kernel32.dll", "WinExec") or
                pe.imports("shell32.dll", "ShellExecute") or
                pe.imports("kernel32.dll", "VirtualAlloc") or
                pe.imports("kernel32.dll", "VirtualProtect") or
                pe.imports("kernel32.dll", "WriteProcessMemory") or
                pe.imports("user32.dll", "GetWindowText") or
                pe.imports("user32.dll", "GetAsyncKeyState") or
                pe.imports("user32.dll", "SetWindowsHook")
            ) or
            for any section in pe.sections : (
                section.raw_data_size > 0 and 
                (section.virtual_size > section.raw_data_size * 2)
            )
        )
}

/* ================ ENHANCED SECURITY RULES ================ */

rule Anti_Debugging {
    meta:
        description = "Enhanced detection of anti-debugging techniques"
        author = "Firdaws Alnuur (Enhanced)"
        date = "2024-06-27"
        severity = "high"
    
    strings:
        $isdebuggerpresent = "IsDebuggerPresent" wide ascii
        $outputdebugstring = "OutputDebugString" wide ascii
        $ntqueryinformationprocess = "NtQueryInformationProcess" wide ascii
        $checkremotedebuggerpresent = "CheckRemoteDebuggerPresent" wide ascii
        $processdebugport = "ProcessDebugPort" wide ascii
        $debugobject = "DebugObject" wide ascii
        $debugactiveprocess = "DebugActiveProcess" wide ascii
        $rdtsc = { 0F 31 }  // RDTSC opcode
        $int3 = { CC }       // INT 3 opcode
        $int2d = { CD 2D }   // INT 2D opcode
    
    condition:
        Valid_PE_File and (
            any of ($*) or
            // Check for timing-based anti-debugging
            pe.imports("kernel32.dll", "GetTickCount") or
            pe.imports("kernel32.dll", "QueryPerformanceCounter") or
            // Check for NtSetInformationThread with ThreadHideFromDebugger
            pe.imports("ntdll.dll", "NtSetInformationThread")
        )
}

rule Process_Injection {
    meta:
        description = "Enhanced detection of process injection techniques"
        author = "Firdaws Alnuur (Enhanced)"
        date = "2024-06-27"
        severity = "high"
    
    strings:
        $virtualalloc = "VirtualAlloc" wide ascii
        $writeprocessmemory = "WriteProcessMemory" wide ascii
        $createremotethread = "CreateRemoteThread" wide ascii
        $ntcreatethreadex = "NtCreateThreadEx" wide ascii
        $queueuserapc = "QueueUserAPC" wide ascii
        $setwindowshookex = "SetWindowsHookEx" wide ascii
        $reflective_loader = "ReflectiveLoader" wide ascii
    
    condition:
        Valid_PE_File and (
            // Basic injection pattern
            (all of ($virtualalloc, $writeprocessmemory, $createremotethread)) or
            // Advanced injection patterns
            (any of ($ntcreatethreadex, $queueuserapc, $setwindowshookex)) or
            // Reflective DLL injection
            $reflective_loader
        )
}

rule Persistence_Mechanisms {
    meta:
        description = "Detects common persistence mechanisms"
        author = "Firdaws Alnuur (Enhanced)"
        date = "2024-06-27"
        severity = "high"
    
    strings:
        $regopenkey = "RegOpenKey" wide ascii
        $regsetvalue = "RegSetValue" wide ascii
        $regcreatekey = "RegCreateKey" wide ascii
        $createfile = "CreateFile" wide ascii
        $writefile = "WriteFile" wide ascii
        $movefile = "MoveFile" wide ascii
        $schtasks = "SchTasks" wide ascii
        $winservice = "StartService" wide ascii
    
    condition:
        Valid_PE_File and (
            // Registry modification
            (any of ($regopenkey, $regsetvalue, $regcreatekey)) and
            pe.imports("advapi32.dll", "RegSetValueExA") or
            // File creation in startup locations
            (any of ($createfile, $writefile, $movefile)) and
            pe.imports("shlwapi.dll", "PathIsDirectoryA") or
            // Scheduled tasks or services
            any of ($schtasks, $winservice)
        )
}

rule Network_Activity {
    meta:
        description = "Detects suspicious network activity patterns"
        author = "Firdaws Alnuur (Enhanced)"
        date = "2024-06-27"
        severity = "high"
    
    strings:
        $socket = "socket" wide ascii
        $connect = "connect" wide ascii
        $send = "send" wide ascii
        $recv = "recv" wide ascii
        $internetopen = "InternetOpen" wide ascii
        $httpopenrequest = "HttpOpenRequest" wide ascii
    
    condition:
        Valid_PE_File and (
            // Basic socket operations
            (all of ($socket, $connect, $send, $recv)) or
            // HTTP operations
            (all of ($internetopen, $httpopenrequest)) or
            // DNS resolution
            pe.imports("dnsapi.dll", "DnsQuery_A") or
            // Hidden network components
            pe.imports("winhttp.dll", "WinHttpOpen") or
            pe.imports("wsock32.dll", "WSASocketA")
        )
}

/* ================ FILE HASH RULES ================ */

rule Known_Malicious_Hashes {
    meta:
        description = "Detects known malicious file hashes"
        author = "Firdaws Alnuur (Enhanced)"
        date = "2024-06-27"
        severity = "critical"
    
    condition:
        // Example hashes (should be populated with real malicious hashes)
        hash.md5(0, filesize) == "d41d8cd98f00b204e9800998ecf8427e" or  // Example only
        hash.sha1(0, filesize) == "da39a3ee5e6b4b0d3255bfef95601890afd80709" or  // Example only
        hash.sha256(0, filesize) == "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"  // Example only
}

/* ================ COMPREHENSIVE MALWARE RULE ================ */

rule High_Confidence_Malware {
    meta:
        description = "High confidence malware detection combining multiple indicators"
        author = "Firdaws Alnuur (Enhanced)"
        date = "2024-06-27"
        severity = "critical"
    
    condition:
        Valid_PE_File and (
            // Multiple strong indicators
            (Packed_Executable and Suspicious_Sections) or
            (Process_Injection and Anti_Debugging) or
            (Persistence_Mechanisms and Network_Activity) or
            
            // Extreme anomalies
            (pe.timestamp == 0 and pe.entry_point == 0) or
            (for any section in pe.sections : (
                section.name == "" and 
                section.characteristics & pe.SECTION_MEM_EXECUTE and
                section.characteristics & pe.SECTION_MEM_WRITE
            )) or
            
            // Known malicious hashes
            Known_Malicious_Hashes
        )
}